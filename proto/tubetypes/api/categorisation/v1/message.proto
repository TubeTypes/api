syntax = "proto3";

package tubetypes.api.categorisation.v1;

import "protoc-gen-gorm/options/gorm.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

message AffirmativeVote {
    option (gorm.opts).ormable = true;
    string id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true default: "gen_random_uuid()"}];
    string channel_id = 2 [(gorm.field).tag = {unique_index: "unique_account_channel"}];
    string category_id = 3;
    string user_id = 4 [(gorm.field).tag = {index: "affirmative_account", unique_index: "unique_account_channel"}];
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp consolidated_at = 6;
}

message NoCategoryVote {
    option (gorm.opts).ormable = true;
    string id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true default: "gen_random_uuid()"}];
    string channel_id = 2;
    string user_id = 3 [(gorm.field).tag = {index: "no_category_account"}];
    google.protobuf.StringValue suggestion = 4;
    google.protobuf.Timestamp created_at = 5;
}

message AISuggestedCategory {
    option (gorm.opts).ormable = true;
    string id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true default: "gen_random_uuid()"}];
    string channel_id = 2;
    string task_id = 3;
    string suggested_category_id = 4;
    double confidence = 5;
    string reason = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
}

enum AISuggestionScrapeState {
    AI_SUGGESTION_SCRAPE_STATE_UNSPECIFIED = 0;
    AI_SUGGESTION_SCRAPE_STATE_STARTED = 1;
    AI_SUGGESTION_SCRAPE_STATE_FINISHED = 2;
    AI_SUGGESTION_SCRAPE_STATE_ERROR = 3;
}

message AISuggestionScrapeTask {
    option (gorm.opts).ormable = true;
    string id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true default: "gen_random_uuid()"}];
    string channel_id = 2;
    AISuggestionScrapeState state = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp finished_at = 5;
}

message AffirmativeVoteList {
    repeated tubetypes.api.categorisation.v1.AffirmativeVote affirmative_votes = 1;
}

message NoCategoryVoteList {
    repeated tubetypes.api.categorisation.v1.NoCategoryVote no_category_votes = 1;
}

message CategorizationSession {
    option (gorm.opts).ormable = true;
    string id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true default: "gen_random_uuid()"}];
    string user_id = 2 [(gorm.field).tag = {unique_index: "unique_session_user"}];
    google.protobuf.Timestamp created_at = 3;
    google.protobuf.Timestamp expires_at = 4;
}

message CategorizationSessionChannel {
    option (gorm.opts).ormable = true;
    string id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true default: "gen_random_uuid()"}];
    CategorizationSession session = 2 [(gorm.field).belongs_to = {}];
    string channel_id = 3;
    google.protobuf.Timestamp created_at = 4;
}